// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::FlatBuffers;

public struct BundleDescData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static BundleDescData GetRootAsBundleDescData(ByteBuffer _bb) { return GetRootAsBundleDescData(_bb, new BundleDescData()); }
  public static BundleDescData GetRootAsBundleDescData(ByteBuffer _bb, BundleDescData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BundleDescData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Path { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPathArray() { return __p.__vector_as_array<byte>(4); }
  public uint Time33 { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Crc { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Md5 { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMd5Bytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetMd5Bytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMd5Array() { return __p.__vector_as_array<byte>(10); }
  public bool IsPreload { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool DontDestroy { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<BundleDescData> CreateBundleDescData(FlatBufferBuilder builder,
      StringOffset pathOffset = default(StringOffset),
      uint time33 = 0,
      uint crc = 0,
      StringOffset md5Offset = default(StringOffset),
      bool isPreload = false,
      bool dontDestroy = false) {
    builder.StartTable(6);
    BundleDescData.AddMd5(builder, md5Offset);
    BundleDescData.AddCrc(builder, crc);
    BundleDescData.AddTime33(builder, time33);
    BundleDescData.AddPath(builder, pathOffset);
    BundleDescData.AddDontDestroy(builder, dontDestroy);
    BundleDescData.AddIsPreload(builder, isPreload);
    return BundleDescData.EndBundleDescData(builder);
  }

  public static void StartBundleDescData(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset pathOffset) { builder.AddOffset(0, pathOffset.Value, 0); }
  public static void AddTime33(FlatBufferBuilder builder, uint time33) { builder.AddUint(1, time33, 0); }
  public static void AddCrc(FlatBufferBuilder builder, uint crc) { builder.AddUint(2, crc, 0); }
  public static void AddMd5(FlatBufferBuilder builder, StringOffset md5Offset) { builder.AddOffset(3, md5Offset.Value, 0); }
  public static void AddIsPreload(FlatBufferBuilder builder, bool isPreload) { builder.AddBool(4, isPreload, false); }
  public static void AddDontDestroy(FlatBufferBuilder builder, bool dontDestroy) { builder.AddBool(5, dontDestroy, false); }
  public static Offset<BundleDescData> EndBundleDescData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<BundleDescData>(o);
  }
};

public struct AssetInBundleData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static AssetInBundleData GetRootAsAssetInBundleData(ByteBuffer _bb) { return GetRootAsAssetInBundleData(_bb, new AssetInBundleData()); }
  public static AssetInBundleData GetRootAsAssetInBundleData(ByteBuffer _bb, AssetInBundleData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AssetInBundleData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Path { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPathArray() { return __p.__vector_as_array<byte>(4); }
  public string BundlePath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBundlePathBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetBundlePathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetBundlePathArray() { return __p.__vector_as_array<byte>(6); }
  public uint BundleTime33 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<AssetInBundleData> CreateAssetInBundleData(FlatBufferBuilder builder,
      StringOffset pathOffset = default(StringOffset),
      StringOffset bundlePathOffset = default(StringOffset),
      uint bundleTime33 = 0) {
    builder.StartTable(3);
    AssetInBundleData.AddBundleTime33(builder, bundleTime33);
    AssetInBundleData.AddBundlePath(builder, bundlePathOffset);
    AssetInBundleData.AddPath(builder, pathOffset);
    return AssetInBundleData.EndAssetInBundleData(builder);
  }

  public static void StartAssetInBundleData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset pathOffset) { builder.AddOffset(0, pathOffset.Value, 0); }
  public static void AddBundlePath(FlatBufferBuilder builder, StringOffset bundlePathOffset) { builder.AddOffset(1, bundlePathOffset.Value, 0); }
  public static void AddBundleTime33(FlatBufferBuilder builder, uint bundleTime33) { builder.AddUint(2, bundleTime33, 0); }
  public static Offset<AssetInBundleData> EndAssetInBundleData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AssetInBundleData>(o);
  }
};

public struct AssetDescData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static AssetDescData GetRootAsAssetDescData(ByteBuffer _bb) { return GetRootAsAssetDescData(_bb, new AssetDescData()); }
  public static AssetDescData GetRootAsAssetDescData(ByteBuffer _bb, AssetDescData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AssetDescData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BundleDescData? BundleDetails(int j) { int o = __p.__offset(4); return o != 0 ? (BundleDescData?)(new BundleDescData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BundleDetailsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public AssetInBundleData? AssetDetails(int j) { int o = __p.__offset(6); return o != 0 ? (AssetInBundleData?)(new AssetInBundleData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AssetDetailsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AssetDescData> CreateAssetDescData(FlatBufferBuilder builder,
      VectorOffset bundleDetailsOffset = default(VectorOffset),
      VectorOffset assetDetailsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    AssetDescData.AddAssetDetails(builder, assetDetailsOffset);
    AssetDescData.AddBundleDetails(builder, bundleDetailsOffset);
    return AssetDescData.EndAssetDescData(builder);
  }

  public static void StartAssetDescData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddBundleDetails(FlatBufferBuilder builder, VectorOffset bundleDetailsOffset) { builder.AddOffset(0, bundleDetailsOffset.Value, 0); }
  public static VectorOffset CreateBundleDetailsVector(FlatBufferBuilder builder, Offset<BundleDescData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBundleDetailsVectorBlock(FlatBufferBuilder builder, Offset<BundleDescData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBundleDetailsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAssetDetails(FlatBufferBuilder builder, VectorOffset assetDetailsOffset) { builder.AddOffset(1, assetDetailsOffset.Value, 0); }
  public static VectorOffset CreateAssetDetailsVector(FlatBufferBuilder builder, Offset<AssetInBundleData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAssetDetailsVectorBlock(FlatBufferBuilder builder, Offset<AssetInBundleData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAssetDetailsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AssetDescData> EndAssetDescData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AssetDescData>(o);
  }
  public static void FinishAssetDescDataBuffer(FlatBufferBuilder builder, Offset<AssetDescData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAssetDescDataBuffer(FlatBufferBuilder builder, Offset<AssetDescData> offset) { builder.FinishSizePrefixed(offset.Value); }
};

